<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TypeUtilities</name>
    </assembly>
    <members>
        <member name="T:ECMPS.Checks.TypeUtilities.cActiveRowHourRanges">
            <summary>
            Provides methods for lists of cActiveRowHourRange.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cActiveRowHourRanges.Create(System.Data.DataView,System.String,System.String,System.String,System.String,ECMPS.Checks.TypeUtilities.cOperatingHour,ECMPS.Checks.TypeUtilities.cOperatingHour,System.String@)">
            <summary>
            Creates a list of distinct hour ranges, with the rows 
            active in those ranges.
            </summary>
            <param name="view">The view to inspect.</param>
            <param name="dateBeganDateColumnName">The name of the began date field.</param>
            <param name="dateBeganHourColumnName">The name of the began hour field.</param>
            <param name="dateEndedDateColumnName">The name of the ended date field.</param>
            <param name="dateEndedHourColumnName">The name of the ended hour field.</param>
            <param name="compareRangeBegan">The begin date/hour of effective window of the ranges.</param>
            <param name="compareRangeEnded">The end date/hour of effective window of the ranges.</param>
            <param name="errorMessage">The error message returned on failure.</param>
            <returns>Returns a list of ranges or null if method fails.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cActiveRowHourRanges.Create(System.Data.DataView,ECMPS.Checks.TypeUtilities.cOperatingHour,ECMPS.Checks.TypeUtilities.cOperatingHour,System.String@)">
            <summary>
            Creates a list of distinct hour ranges, with the rows 
            active in those ranges.
            </summary>
            <param name="view">The view to inspect.</param>
            <param name="compareRangeBegan">The begin date/hour of effective window of the ranges.</param>
            <param name="compareRangeEnded">The end date/hour of effective window of the ranges.</param>
            <param name="errorMessage">The error message returned on failure.</param>
            <returns>Returns a list of ranges or null if method fails.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cActiveRowHourRanges.Create(System.Data.DataView,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String@)">
            <summary>
            Creates a list of distinct hour ranges, with the rows 
            active in those ranges, using datetime format for the passed dates.
            </summary>
            <param name="view">The view to inspect.</param>
            <param name="compareRangeBegan">The begin date/hour of effective window of the ranges in datetime format.</param>
            <param name="compareRangeEnded">The end date/hour of effective window of the ranges in datetime format.</param>
            <param name="errorMessage">The error message returned on failure.</param>
            <returns>Returns a list of ranges or null if method fails.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cActiveRowHourRange">
            <summary>
            Hold the range information for and Date/Hour range, 
            as well as a list of rows active during the range.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cActiveRowHourRange.#ctor(ECMPS.Checks.TypeUtilities.cOperatingHour,ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            The base constructor.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cActiveRowHourRange.Rows">
            <summary>
            The list of rows active during the date/hour range.
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDataFunctions">
            <summary>
            Data handling class for checks
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDataFunctions.ColumnToDatalist(System.Data.DataView,System.String)">
            <summary>
            Creates a comma delimited list of the values from a particular column in a dataview.
            </summary>
            <param name="ADataView">The data view</param>
            <param name="AColumnName">The column from which the data is extracted</param>
            <returns>The list of values from the specified column</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDataFunctions.RowsForMatchingKey(System.Data.DataView,System.String,System.String)">
            <summary>
            Returns a Data View containing the rows from the source view with the indicated key field value.
            </summary>
            <param name="ASourceView">The data view to search</param>
            <param name="AKeyField">The name of the key field</param>
            <param name="AKeyValue">The value expected in the key field</param>
            <returns>The data view containing the matching rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDataFunctions.CreateDataTable(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Nullable{System.Int32})">
            <summary>
            Returns an empty DataTable matching the catalog 
            </summary>
            <param name="databaseName">The name of the database containing the template table for the datatable.</param>
            <param name="schemaName">The name of the schema containing the template table for the datatable.</param>
            <param name="tableName">The name of the template table for the datatable.</param>
            <param name="connection">The connection to use to access the template table.</param>
            <param name="commandTimeout">The override command timeout.</param>
            <returns>Returns a database if successful, otherwise returns a null.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDateFunctions">
            <summary>
            Class containing some nice date/hour functions
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cDateFunctions.ReportingPeriodTable">
            <summary>
            Returns the current Reporting Period Table
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.CombineToHour(System.Data.DataRowView,System.String,System.String,System.String)">
            <summary>
            Uses the passed row and columns names to return a DateTime?
            containing hours and minutes.
            </summary>
            <param name="sourceRow">The row contains the date and time information.</param>
            <param name="dateColumnName">The name of the date column.</param>
            <param name="hourColumnName">The name of the hour column.</param>
            <param name="minuteColumnName">The name of the minute column.</param>
            <returns>The date value with hour and minute.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.CombineToHour(System.Data.DataRowView,System.String,System.String)">
            <summary>
            Uses the passed row and columns names to return a DateTime?
            containing hours.
            </summary>
            <param name="sourceRow">The row contains the date and time information.</param>
            <param name="dateColumnName">The name of the date column.</param>
            <param name="hourColumnName">The name of the hour column.</param>
            <returns>The date value with hour.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.GetYearAndQuarter(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get the start date of the quarter relative to the passed in reporting period
            </summary>
            <param name="ARptPeriodId">The reference reporting period</param>
            <param name="AYear">The year for the the RPT_PERIOD_ID in question</param>
            <param name="AQuarter">The quarter for the the RPT_PERIOD_ID in question</param>
            <returns>System.DateTime containing the start date of this quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.ThisQuarter(System.DateTime)">
            <summary>
            Gets the number of the quarter of the input date: 1, 2, 3, or 4
            </summary>
            <param name="ThisDate">The reference date</param>
            <returns>int indicating the present quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.ThisReportingPeriod(System.DateTime)">
            <summary>
            Gets the reporting period of the input date.  
            If non is found or a failure occurs then the return value is int.MinValue.
            </summary>
            <param name="ThisDate">The reference date</param>
            <returns>int indicating the present reporting period</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.StartDateThisQuarter(System.Int32)">
            <summary>
            Get the start date of the quarter relative to the passed in reporting period
            </summary>
            <param name="ARptPeriodId">The reference reporting period</param>
            <returns>System.DateTime containing the start date of this quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.StartDateNextQuarter(System.DateTime)">
            <summary>
            Get the start date of the next quarter relative to the passed in date
            </summary>
            <param name="ThisDate">The reference date</param>
            <returns>System.DateTime containing the start date of the next quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.StartDateThisQuarter(System.DateTime)">
            <summary>
            Get the start date of the quarter relative to the passed in date
            </summary>
            <param name="ThisDate">The reference date</param>
            <returns>System.DateTime containing the start date of this quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.StartDateThisQuarter(System.Int32,System.Int32)">
            <summary>
            Get the start date of the quarter passed in
            </summary>
            <param name="Year">The reference year</param>
            <param name="ThisQuarter">The reference quarter</param>
            <returns>System.DateTime containing the start date of the quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.LastDateThisQuarter(System.Int32)">
            <summary>
            Get the end date of the quarter relative to the passed in reporting period
            </summary>
            <param name="rptPeriodId">The reference reporting period</param>
            <returns>System.DateTime containing the start date of this quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.LastDateNextQuarter(System.DateTime)">
            <summary>
            Get the end date of the next quarter relative to the passed in date
            </summary>
            <param name="ThisDate">The reference date</param>
            <returns>System.DateTime containing the start date of the next quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.LastDatePriorQuarter(System.DateTime)">
            <summary>
            Get the last date for the quarter prior to the passed in date
            </summary>
            <param name="ThisDate">The reference date</param>
            <returns>System.DateTime containing the end date of the previous quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.LastDateThisQuarter(System.DateTime)">
            <summary>
            Get the last date in the current quarter relative  to the passed in date
            </summary>
            <param name="ThisDate">The reference date</param>
            <returns>System.DateTime containing the end date of this quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.LastDateThisQuarter(System.Int32,System.Int32)">
            <summary>
            Get the last date in the quarter passed in
            </summary>
            <param name="Year">The reference year</param>
            <param name="ThisQuarter">The reference quarter</param>
            <returns>System.DateTime containing the end date of the quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.DateDifference(System.DateTime,System.DateTime)">
            <summary>
            Returns the whole day difference from the reference date to the test date.  The result will
            be negative when the test date is before the reference date.
            </summary>
            <param name="AReferenceDate">The date from which to measure the difference.</param>
            <param name="ATestDate">The date to which to measure the difference.</param>
            <returns>The difference between the test date and the reference date.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.HourDifference(System.DateTime,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Returns the hour difference from the reference hour to the test hour.  The result will
            be negative when the test hour is before the reference hour.
            </summary>
            <param name="AReferenceDate">The date from which to measure the difference.</param>
            <param name="AReferenceHour">The hour from which to measure the difference.</param>
            <param name="ATestDate">The date to which to measure the difference.</param>
            <param name="ATestHour">The hour to which to measure the difference.</param>
            <returns>The difference between the test hour and the reference hour.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.HourDifference(System.DateTime,System.DateTime)">
            <summary>
            Returns thehourly difference between the hours in two DateTime objects.
            </summary>
            <param name="referenceHour">The starting date in the comparison.</param>
            <param name="testHour">The ending date in the comparison.</param>
            <returns>The AddHour value used on the reference DateTime to arrive at the test DateTime's Date and Hour values.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.LatestDate(System.Nullable{System.DateTime}[])">
            <summary>
            Return latest date time in the date time list, excluding nulls.
            </summary>
            <param name="dateTimeList">The date time list to check.</param>
            <returns>The latest date time.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.Earliest(System.Nullable{System.DateTime}[])">
            <summary>
            This function returns the earliest datetime in a list of nullible date times.
            
            The function ignores any nulls in the list, but will return a null if no non
            null dates exist in the list.
            </summary>
            <param name="datetimeList"></param>
            <returns>Returns the earliest date in the list.  Returns a null if no non null dates exist in the list.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateFunctions.Earliest(System.Boolean,System.Nullable{System.DateTime}[])">
            <summary>
            This function returns the earliest datetime in a list of nullible date times.  
            
            Additionally, the function allows the caller to indicate whether a null in the
            list should result in the function returning a null, essentially making a null
            the earliest date.
            </summary>
            <param name="nullIsEarliest">Indicates whether to return null if a null is in the list of dates.</param>
            <param name="datetimeList">The list of nullible dates from which to return the earliest date.</param>
            <returns>Returns the earliest date in the list.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.DateTypes">
            <summary>
            The types of date/hour objects
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.DateTypes.START">
            <summary>
            A BEGIN_DATE or BEGIN_HOUR field
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.DateTypes.END">
            <summary>
            An END_DATE or END_HOUR field
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDBConvert">
            <summary>
            Class to convert database objects to their real types in a DBNull.Value aware way
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToBoolean(System.Object,System.Boolean)">
            <summary>
            Convert a database object to a bool type, handling NULL values properly
            </summary>
            <param name="DBBooleanValue">The database object in question</param>
            <param name="Default">The default if the value is NULL</param>
            <returns>Boolean representation of value, or default if NULL</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToBoolean(System.Object)">
            <summary>
            Convert a database object to a bool type, false if value is NULL
            </summary>
            <param name="DBBooleanValue">The database object in question</param>
            <returns>Boolean representation of value, or false if NULL</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToDate(System.Object,ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Convert the database date value to a System.DateTime
            </summary>
            <param name="DBDateValue">The database date object in question</param>
            <param name="DateType">Is it a BEGIN_DATE or an END_DATE field?</param>
            <returns>System.DateTime object, or defaults if NULL</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToDecimal(System.Object,System.Decimal)">
            <summary>
            Convert a database decimal value to a decimal object
            <remarks>returns decimal.MinValue if NULL</remarks>
            </summary>
            <param name="DBDecimalValue">The database decimal object in question</param>
            <param name="DefaultValue">The default value if object is NULL</param>
            <returns>decimal object, or decimal.MinValue if NULL</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToDecimal(System.Object)">
            <summary>
            Convert a database decimal value to a decimal object
            <remarks>returns decimal.MinValue if NULL</remarks>
            </summary>
            <param name="DBDecimalValue">The database decimal object in question</param>
            <returns>decimal object, or decimal.MinValue if NULL</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToHour(System.Object,ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Convert a database "HOUR" field to a int object
            </summary>
            <param name="DBIntegerValue">The database "HOUR" object in question</param>
            <param name="DateType">Is it a BEGIN_HOUR or an END_HOUR</param>
            <returns>Valid int value for an "HOUR" field</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToMinute(System.Object,ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Convert a database "MINUTE" field to a int object
            </summary>
            <param name="DBIntegerValue">The database "MINUTE" object in question</param>
            <param name="DateType">Is it a BEGIN_MIN or an END_MIN</param>
            <returns>Valid int value for an "MINUTE" field</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToInteger(System.Object,System.Int32)">
            <summary>
            Convert a database integer field to an int object
            </summary>
            <param name="DBIntegerValue">The database integer object in question</param>
            <param name="DefaultValue">The default value if object is NULL</param>
            <returns>The database object converted to an int</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToInteger(System.Object)">
            <summary>
            Convert a database integer field to an int object
            </summary>
            <param name="DBIntegerValue">The database integer object in question</param>
            <returns>The database object converted to an int</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToLong(System.Object)">
            <summary>
            Convert a database long field to an long object
            </summary>
            <param name="DBLongValue">The database long object in question</param>
            <returns>The database object converted to an long</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToString(System.Object)">
            <summary>
            Convert a database string field to a System.string object
            </summary>
            <param name="DBStringValue">The database string object in question</param>
            <returns>The database object converted to an string</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToNullableBoolean(System.Object)">
            <summary>
            Convert a database boolean to a nullable bool type
            </summary>
            <param name="DBBooleanValue">The database boolean to convert</param>
            <returns>Nullable boolean representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToNullableDateTime(System.Object)">
            <summary>
            Convert the database date value to a nullable System.DateTime
            </summary>
            <param name="DBDateValue">The database date to convert</param>
            <returns>Nullable System.DateTime representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToNullableDecimal(System.Object)">
            <summary>
            Convert a database decimal value to a nullable decimal
            </summary>
            <param name="DBDecimalValue">The database decimal to convert</param>
            <returns>Nullabe decimal representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToNullableInteger(System.Object)">
            <summary>
            Convert a database decimal value to a nullable integer
            </summary>
            <param name="DBIntegerValue">The database integer to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToNullableLong(System.Object)">
            <summary>
            Convert a database decimal value to a nullable long
            </summary>
            <param name="DBLongValue">The database long to convert</param>
            <returns>Nullabe long representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToNullableString(System.Object)">
            <summary>
            Convert a database string value to a string
            </summary>
            <param name="DBStringValue">The database string to convert</param>
            <returns>string representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToVariant(System.DateTime,ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Convert a type specific value to a value suitable to insert into the database - NULL aware
            </summary>
            <param name="ADate">The System.DateTime object to convert</param>
            <param name="ANullDateType">Is it a BEGIN_DATE or END_DATE</param>
            <returns>object representing the value, DBNull.Value if it should be null</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToVariant(System.Decimal)">
            <summary>
            Convert a type specific value to a value suitable to insert into the database - NULL aware
            </summary>
            <param name="ADecimal">The System.Decimal object to convert</param>
            <returns>object representing the value, DBNull.Value if it should be null</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToVariant(System.Int32,System.Int32)">
            <summary>
            Convert a type specific value to a value suitable to insert into the database - NULL aware
            </summary>
            <param name="AInteger">The int object to convert</param>
            <param name="ANullValue">The value for a "null" integer</param>
            <returns>object representing the value, DBNull.Value if it should be null</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToVariant(System.Int32)">
            <summary>
            Convert a type specific value to a value suitable to insert into the database - NULL aware
            </summary>
            <param name="AInteger">The int object to convert</param>
            <returns>object representing the value, DBNull.Value if it should be null</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToVariant(System.Int64)">
            <summary>
            Convert a type specific value to a value suitable to insert into the database - NULL aware
            </summary>
            <param name="ALong">The long object to convert</param>
            <returns>object representing the value, DBNull.Value if it should be null</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDBConvert.ToVariant(System.String)">
            <summary>
            Convert a type specific value to a value suitable to insert into the database - NULL aware
            </summary>
            <param name="AString">The System.String object to convert</param>
            <returns>object representing the value, DBNull.Value if it should be null</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDecimalPrecision">
            <summary>
            Status class that gives access to testing whether a decimal will fit into a field with
            a particular decimal precision.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDecimalPrecision.Check(System.Decimal,ECMPS.Checks.TypeUtilities.eDecimalPrecision)">
            <summary>
            Checks the decimal value against the decimal precision specification.
            </summary>
            <param name="AValue">The value to check.</param>
            <param name="ADecimalPrecision">The specification to check against.</param>
            <returns>True if the value will fit into a field mathcing the specification.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDecimalPrecision.cHandleDecimalPrecision">
            <summary>
            Allows testing whether a given value is less than or equal to the 
            maximum value based on the defining precision and scale values.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDecimalPrecision.cHandleDecimalPrecision.IsValid(System.Decimal)">
            <summary>
            Indicates whether the value will fit into a field with the defining precision and scale.
            </summary>
            <param name="AValue">The value to test.</param>
            <returns>True if the test value will fit into the a field of the defining precision and scale.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDecimalPrecision.Initialize">
            <summary>
            Initialize the class
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eDecimalPrecision">
            <summary>
            Enumeration for identifying decimal perceion information
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.ADJUSTED_HRLY_VALUE">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.APPLICABLE_BIAS_ADJ_FACTOR">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.CURRENT_RPT_PERIOD_TOTAL">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.MASS_FLOW_RATE">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.OP_VALUE">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.OS_TOTAL">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.PARAM_VAL_FUEL">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.PCT_DILUENT">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.PCT_MOISTURE">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.TOTAL_HEAT_INPUT">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.UNADJUSTED_HRLY_VALUE">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.UPSCALE_CAL_ERROR">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.VOLUMETRIC_FLOW_RATE">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.YEAR_TOTAL">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.ZERO_CAL_ERROR">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.TOTAL_DAILY_EMISSION">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.FUEL_CARBON_BURNED">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.TOTAL_DAILY_OP_TIME">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.FUEL_FLOW_TOTAL">
            <summary>
            Decimal Precision Type
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.MATS_PERCENT">
            <summary>
            MATS Percentage (does not include 100%)
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eDecimalPrecision.MATS_PERCENT_BREAKTHROUGH">
            <summary>
            MATS Breakthrough Percentage (does not include 100%)
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.DistinctHourRanges">
            <summary>
            This object is used to capture distinct date ranges from added individual date ranges.
            
            The initial date range is based on the Lower and Upper Bound 
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRanges.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Initialized a distinct ranges object including setting the lower and upper bounds for ranges to include.
            </summary>
            <param name="lowerBound">The lower bound for the distinct ranges.  This hour will become the begin date for ranges that stratle the date.</param>
            <param name="upperBound">The upper bound for the distinct ranges.  This hour will become the end date for ranges that stratle the date.</param>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRanges.Item(System.Int32)">
            <summary>
            Returns the range associated with the index.
            </summary>
            <param name="index">The index of the range to end.</param>
            <returns>The range at the index.</returns>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRanges.LowerBound">
            <summary>
            The lower bound for the distinct ranges.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRanges.MaxHour">
            <summary>
            The maximum hour with date for Distinct Hour Ranges.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRanges.MinHour">
            <summary>
            The minimum hour with date for Distinct Hour Ranges.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRanges.RangeCount">
            <summary>
            Returns the number of ranges contained in the object.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRanges.UpperBound">
            <summary>
            The upper bound for the distinct ranges.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRanges.Add(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Add a new range to the existing ranges, spawning new ranges if overlaps occur to create separate ranges for overlaps.
            </summary>
            <param name="lowerBound">The lower bound of the new range.</param>
            <param name="upperBound">The upper bound of the new range.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRanges.System#Collections#Generic#IEnumerable{ECMPS#Checks#TypeUtilities#DistinctHourRange}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Returns the enumerator for the hour range list.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRanges.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Returns the enumerator for the hour range list.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.DistinctHourRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRange.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Created a distinct hour range instance.
            </summary>
            <param name="began">The begin date of the hour range.</param>
            <param name="ended">The end date of the hour range.</param>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRange.Began">
            <summary>
            The begin date for a date range.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.DistinctHourRange.Ended">
            <summary>
            The end date for a date range.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRange.CompareTo(ECMPS.Checks.TypeUtilities.DistinctHourRange)">
            <summary>
            Compares the current instance to another instance.
            </summary>
            <param name="other">The other instance in the comparison.</param>
            <returns>-1 for less than, 1 for greater than, and 0 for the same.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRange.Equals(ECMPS.Checks.TypeUtilities.DistinctHourRange)">
            <summary>
            Determine whether the current instance equals another instance.
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRange.Equals(System.Object)">
            <summary>
            Determine whether the current instance equals another instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRange.FormatHour(System.DateTime)">
            <summary>
            Formats and hour in date form to a string.
            </summary>
            <param name="dateHour">The date/hour.</param>
            <returns>The formatted date/hour.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRange.GetHashCode">
            <summary>
            Returns the has code for the current intance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.DistinctHourRange.ToString">
            <summary>
            Returns the string version of the object values.
            </summary>
            <returns>The string version of the object.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eSpanScale">
            <summary>
            Span Scale
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eSpanScale.High">
            <summary>
            Span Scale Code of 'H'
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eSpanScale.Low">
            <summary>
            Span Scale Code of 'L'
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eSpanScale.None">
            <summary>
            No span scale specified
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eHourMeasureParameter">
            <summary>
            Enumeration of DataMart (AMPD) Emission Parameters
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Co2c">
            <summary>
            CO2 Concentration
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Density">
            <summary>
            Density
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Ff">
            <summary>
            Fuel Flow
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Flow">
            <summary>
            Flow
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Gcv">
            <summary>
            GCV
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.H2o">
            <summary>
            H2O
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Noxc">
            <summary>
            NOX Concentration
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Noxr">
            <summary>
            NOX Rate
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.O2d">
            <summary>
            O2 Dry
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.O2w">
            <summary>
            O2 Wet
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.So2c">
            <summary>
            SO2 Concentration
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHourMeasureParameter.Sulfer">
            <summary>
            Sulfer
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cExtensions">
            <summary>
            Extensions needed by type utilities
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.Default(System.Nullable{System.DateTime},ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Returns the value when not null, otherwise returns the default value.
            </summary>
            <param name="value">The value to default.</param>
            <param name="dateType">Indcates whether the default is the DateTime Min or Max.</param>
            <returns>Resturns the value or the default if value is null.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsHourMeasureParameter(System.String)">
            <summary>
            Returns the eHourMeasureParameter value for the passed hour measure code.
            </summary>
            <param name="hourMeasureCd">The hour measured code.</param>
            <returns>The eHourMeasureParameter value or null if none match.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsDateTime(ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Convert the database date value to a nullable System.DateTime
            </summary>
            <param name="value">The database date to convert</param>
            <returns>Nullable System.DateTime representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsHour(System.Object)">
            <summary>
            Convert a database value to a nullable hour
            </summary>
            <param name="value">The database integer to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsHour(ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Convert the database date value to a nullable System.DateTime
            </summary>
            <param name="value">The database date to convert</param>
            <returns>Nullable System.DateTime representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsInteger(ECMPS.Checks.TypeUtilities.eHour)">
            <summary>
            Convert a database eHour value to a nullable integer
            </summary>
            <param name="value">The database integer to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsInteger(System.Nullable{ECMPS.Checks.TypeUtilities.eHour})">
            <summary>
            Convert a database eHour value to a nullable integer
            </summary>
            <param name="value">The database integer to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.DbDate(ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Returns the DB value for the date part of an operating hour.
            </summary>
            <param name="operatingHour">The operating hour</param>
            <returns>The DB value for the date part of an operating hour.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.DbHour(ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Returns the DB value for the hour part of an operating hour.
            </summary>
            <param name="operatingHour">The operating hour</param>
            <returns>The DB value for the hour part of an operating hour.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.DbValue(ECMPS.Checks.TypeUtilities.eHour)">
            <summary>
            Convert the passed value to it DB representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The DB representation.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.DbValue(System.Nullable{ECMPS.Checks.TypeUtilities.eHour})">
            <summary>
            Convert the passed value to it DB representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The DB representation.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.Default(System.Nullable{ECMPS.Checks.TypeUtilities.eHour},ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Returns the value when not null, otherwise returns the default value.
            </summary>
            <param name="value">The value to default.</param>
            <param name="dateType">Indicates whether the default is for a begin or end date.</param>
            <returns>Resturns the value or the default if value is null.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToBeginHour(System.Int32)">
            <summary>
            Returns the begin hour value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the quarter is null.
            If the combined value is less than zero then the quarter value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToBeginHour(System.Nullable{System.Int32})">
            <summary>
            Returns the begin hour value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the quarter is null.
            If the combined value is less than zero then the quarter value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToEndHour(System.Int32)">
            <summary>
            Returns the end hour value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the quarter is null.
            If the combined value is less than zero then the quarter value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToEndHour(System.Nullable{System.Int32})">
            <summary>
            Returns the end hour value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the quarter is null.
            If the combined value is less than zero then the quarter value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToQuarter(System.Int32)">
            <summary>
            Returns the quarter value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the quarter is null.
            If the combined value is less than zero then the quarter value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToQuarter(System.Nullable{System.Int32})">
            <summary>
            Returns the quarter value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the quarter is null.
            If the combined value is less than zero then the quarter value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToYear(System.Int32)">
            <summary>
            Returns the year value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the year is null.
            If the combined value is less than zero then the year value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.IntToYear(System.Nullable{System.Int32})">
            <summary>
            Returns the year value when the quarter for a specific year is stored as 
            an integer value calculated as (4 * year) + (quarter - 1).
            
            If the combined value is null then the year is null.
            If the combined value is less than zero then the year value is -1.
            </summary>
            <param name="value">The year/quarter value as a single integer value.</param>
            <returns>The quarter part of the year/quarter integer value.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsInteger(ECMPS.Checks.TypeUtilities.eQuarter)">
            <summary>
            Convert a database eHour value to a nullable integer
            </summary>
            <param name="value">The eQuarter to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsInteger(System.Nullable{ECMPS.Checks.TypeUtilities.eQuarter})">
            <summary>
            Convert a database eHour value to a nullable integer
            </summary>
            <param name="value">The eQuarter to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsQuarter(System.Nullable{System.DateTime})">
            <summary>
            Convert a database value to a nullable hour
            </summary>
            <param name="value">The Date to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsQuarter(System.Object)">
            <summary>
            Convert a database value to a nullable hour
            </summary>
            <param name="value">The database integer to convert</param>
            <returns>Nullabe integer representation of the value</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.AsReportingPeriod(System.Object)">
            <summary>
            Convert object to a cReportingPeriod.
            </summary>
            <param name="value">The object to convert.</param>
            <returns>Returns cReportingPeriod, or null if conversion fails.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.Earliest(System.Data.DataView,System.String)">
            <summary>
            Returns the first row with the earliest date in the view.
            </summary>
            <param name="view">The view to search.</param>
            <param name="dateColumn">The date column to compare.</param>
            <returns>The earliest row.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.Latest(System.Data.DataView,System.String)">
            <summary>
            Returns the last row with the latest date in the view.
            </summary>
            <param name="view">The view to search.</param>
            <param name="dateColumn">The date column to compare.</param>
            <returns>The latest row.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cExtensions.Find(ECMPS.Checks.TypeUtilities.cFilterCondition[],System.String)">
            <summary>
            Returns the filter conditions for the passed field.
            </summary>
            <param name="rowFilter">The filter conditions to check.</param>
            <param name="fieldName">The field name to find.</param>
            <returns>The filter conditions for the passed field, zero length if none are found.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cFilterFormat">
            <summary>
            This utility class provides methods that facilitate formating filters for DataViews.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.AsEquals(System.String,System.DateTime)">
            <summary>
            Returns an equal expresion for a filter
            </summary>
            <param name="columnName">The column name.</param>
            <param name="columnValue">The column values.</param>
            <returns>The equals expression.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.AsEquals(System.String,System.String)">
            <summary>
            Returns an equal expresion for a filter
            </summary>
            <param name="columnName">The column name.</param>
            <param name="columnValue">The column values.</param>
            <returns>The equals expression.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.AndFilters(System.String,System.String)">
            <summary>
            Ands the two filter expresions together.
            </summary>
            <param name="operandOne">The first filter expression.</param>
            <param name="operandTwo">The second filter expression.</param>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.OrFilters(System.String,System.String)">
            <summary>
            Ors the two filter expresions together.
            </summary>
            <param name="operandOne">The first filter expression.</param>
            <param name="operandTwo">The second filter expression.</param>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRows(System.DateTime,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the specified began and ended columns.
            </summary>
            <param name="opDate">The date to test.</param>
            <param name="opHour">The hour to test.</param>
            <param name="beganDateColumnName">The began date column of the data.</param>
            <param name="beganHourColumnName">The began hour column of the data.</param>
            <param name="endedDateColumnName">The ended date column of the data.</param>
            <param name="endedHourColumnName">The ended hour column of the data.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRows(System.DateTime,System.Int32)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the BEGIN_DATE, BEGIN_HOUR, END_DATE and END_HOUR columns.
            </summary>
            <param name="opDate">The date to test.</param>
            <param name="opHour">The hour to test.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRows(System.DateTime,System.String,System.String)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the specified began and ended columns.
            </summary>
            <param name="opDate">The date to test.</param>
            <param name="beganDateColumnName">The began date column of the data.</param>
            <param name="endedDateColumnName">The ended date column of the data.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRows(System.DateTime)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the BEGIN_DATE and END_DATE columns.
            </summary>
            <param name="opDate">The date to test.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRowsForLocation(System.String,System.DateTime,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the specified began and ended columns.
            </summary>
            <param name="monLocId">The MON_LOC_ID to test.</param>
            <param name="opDate">The date to test.</param>
            <param name="opHour">The hour to test.</param>
            <param name="beganDateColumnName">The began date column of the data.</param>
            <param name="beganHourColumnName">The began hour column of the data.</param>
            <param name="endedDateColumnName">The ended date column of the data.</param>
            <param name="endedHourColumnName">The ended hour column of the data.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRowsForLocation(System.String,System.DateTime,System.Int32)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the BEGIN_DATE, BEGIN_HOUR, END_DATE and END_HOUR columns.
            </summary>
            <param name="monLocId">The MON_LOC_ID to test.</param>
            <param name="opDate">The date to test.</param>
            <param name="opHour">The hour to test.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRowsForLocation(System.String,System.DateTime,System.String,System.String)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the specified began and ended columns.
            </summary>
            <param name="monLocId">The MON_LOC_ID to test.</param>
            <param name="opDate">The date to test.</param>
            <param name="beganDateColumnName">The began date column of the data.</param>
            <param name="endedDateColumnName">The ended date column of the data.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterFormat.ActiveRowsForLocation(System.String,System.DateTime)">
            <summary>
            Returns a filter string that will produce active rows given a specific hour
            for the BEGIN_DATE and END_DATE columns.
            </summary>
            <param name="monLocId">The MON_LOC_ID to test.</param>
            <param name="opDate">The date to test.</param>
            <returns>The filter string.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cList">
            <summary>
            List class for checks
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListAdd(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Add an item to the list
            </summary>
            <param name="AList">The list to add the item to (may be null)</param>
            <param name="AItem">The item to add to the list</param>
            <param name="ADelimeter">The delimeter for the list</param>
            <param name="AllowDuplicates">Are duplicates allowed in the list?</param>
            <returns>The new list with the item appened to the end</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListAdd(System.String,System.String)">
            <summary>
            Add an item to the list, using default of comma as the delimeter - NO DUPLICATES ALLOWED
            </summary>
            <param name="AList">The list to add the item to (may be null)</param>
            <param name="AItem">The item to add to the list</param>
            <returns>The new list with the item appened to the end</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListAdd(System.String,System.String,System.Boolean)">
            <summary>
            Add an item to the list, using default of comma as the delimeter
            </summary>
            <param name="AList">The list to add the item to (may be null)</param>
            <param name="AItem">The item to add to the list</param>
            <param name="AllowDuplicates">Are duplicates allowed in the list?</param>
            <returns>The new list with the item appened to the end</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListCount(System.String,System.String)">
            <summary>
            Get the number of items in the list
            </summary>
            <param name="AList">The list in question</param>
            <param name="ADelimeter">The delimeter for the list</param>
            <returns>Number of items in the list</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListCount(System.String)">
            <summary>
            Get the number of items in the list, using default of comma as the delimeter
            </summary>
            <param name="AList">The list in question</param>
            <returns>Number of items in the list</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListItem(System.String,System.Int32,System.String)">
            <summary>
            Get an item in the list by index
            </summary>
            <param name="AList">The list in question</param>
            <param name="AIndex">The index of the item to get</param>
            <param name="ADelimeter">The delimeter for the list</param>
            <returns>The item at the requested index</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListItem(System.String,System.Int32)">
            <summary>
            Get an item in the list by index, using default of comma as delimeter
            </summary>
            <param name="AList">The list in question</param>
            <param name="AIndex">The index of the item to get</param>
            <returns>The item at the requested index</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.ListHas(System.String,System.String)">
            <summary>
            Indicates whether the specified comma separated list contains the specified item.
            
            The return value is always false if the list is null or a null string, 
            or if the item is null.  The return value will be true if the item is
            a null string and the list begins or ends with a comma, or two
            commas appear side by side.
            </summary>
            <param name="AList">The list in question</param>
            <param name="AItem">The item to search for</param>
            <returns>true if yes, false if no</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.FormatList(System.String,System.Boolean)">
            <summary>
            Format a list for display
            <example>fred,barney,wilma becomes fred, barney and wilma</example>
            </summary>
            <param name="AList">The list in question</param>
            <param name="OrText">Is the last item in the list 'and' or 'or'</param>
            <returns>The formated list for display</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cList.FormatList(System.String)">
            <summary>
            Format a list for display
            <example>fred,barney,wilma becomes fred, barney and wilma</example>
            </summary>
            <param name="AList">The list in question</param>
            <returns>The formated list for display</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cReportingPeriod">
            <summary>
            Holds the date and hour parts of an operating hour.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.#ctor(System.Int32)">
            <summary>
            Create an object to hold reporting period information.
            </summary>
            <param name="rptPeriodId">The reporting period id for which to create the object.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Create an object to hold reporting period information.
            </summary>
            <param name="rptPeriodId"></param>
            <param name="year"></param>
            <param name="quarter"></param>
            <param name="description"></param>
            <param name="abbreviation"></param>
            <param name="beganDate"></param>
            <param name="endedDate"></param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.#ctor(System.DateTime)">
            <summary>
            Create an object to hold reporting period information.
            </summary>
            <param name="dateTime">The date/time for which to create the object.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.#ctor(System.Int32,System.Int32)">
            <summary>
            Create an object to hold reporting period information.
            </summary>
            <param name="year">Year of reporting period.</param>
            <param name="quarter">Quarter of reporting period.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.#ctor(System.Data.DataRow)">
            <summary>
            Constructor for an operating quarter.
            </summary>
            <param name="rptPeriodRow">A reporting period data row.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.GetReportingPeriod(System.Int32)">
            <summary>
            Returns a reporting period for the passed RPT_PERIOD_ID.
            </summary>
            <param name="rptPeriodId">The report period id.</param>
            <returns>The reporting period for the passed year and quarter.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.GetReportingPeriod(System.Int32,System.Int32)">
            <summary>
            Returns a reporting period for the passed year and quarter.
            </summary>
            <param name="year">The year for which to return a quarter.</param>
            <param name="quarter">The quarter for which to return a quarter.</param>
            <returns>The reporting period for the passed year and quarter.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.GetReportingPeriod(System.Int32,ECMPS.Checks.TypeUtilities.eQuarter)">
            <summary>
            Returns a reporting period for the passed year and quarter.
            </summary>
            <param name="year">The year for which to return a quarter.</param>
            <param name="quarter">The quarter for which to return a quarter.</param>
            <returns>The reporting period for the passed year and quarter.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.LookupRow(System.Int32)">
            <summary>
            Get the start date of the quarter realitive to the passed in reporting period
            </summary>
            <param name="rptPeriodId">The reference reporting period</param>
            <returns>System.DateTime containing the start date of this quarter</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.LookupRow(System.Int32,System.Int32)">
            <summary>
            Get the start date of the quarter realitive to the passed in reporting period
            </summary>
            <param name="year">The year for which to return a quarter.</param>
            <param name="quarter">The quarter for which to return a quarter.</param>
            <returns>System.DateTime containing the start date of this quarter</returns>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.LookupTable">
            <summary>
            Returns the current Reporting Period Table
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cReportingPeriod.FLookupTable">
            <summary>
            Contains the lookup table used to read reporting period information.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.Abbreviation">
            <summary>
            The period abbreviation
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.BeganDate">
            <summary>
            The began date of the reporting period.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.BeganMonth">
            <summary>
            The began date of the reporting period.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.Description">
            <summary>
            The period description.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.EndedDate">
            <summary>
            The ended date of the reporting period.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.EndedMonth">
            <summary>
            The ended date of the reporting period.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.RptPeriodId">
            <summary>
            The Reporting Period Id for the Reporting Period.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.Quarter">
            <summary>
            The hour part of the operating hour
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cReportingPeriod.Year">
            <summary>
            The date part of the operating hour
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.AddQuarter(System.Int32)">
            <summary>
            Adds a quarter to an operating quarter.
            </summary>
            <param name="shift">The number of quaters to add.</param>
            <returns>The updated operating quarter.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.AddYear(System.Int32)">
            <summary>
            Adds a year to an operating quater.
            </summary>
            <param name="shift">The number of years to add.</param>
            <returns>The updated operating quarter.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>A string representation of the object.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.CompareTo(ECMPS.Checks.TypeUtilities.cReportingPeriod)">
            <summary>
            Compare this cOperatingHour to the passed cOperater
            </summary>
            <param name="other">The cOperatingHour to which this cOperatingHour is compared.</param>
            <returns>0: Equal, 1: Greater than other, -1:Less than other </returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cReportingPeriod.Equals(ECMPS.Checks.TypeUtilities.cReportingPeriod)">
            <summary>
            Determines whether this cOperatingHour has the same value as the passed cOperater
            </summary>
            <param name="other">The cOperatingHour to which this cOperatingHour is compared.</param>
            <returns>0: Equal, 1: Greater than other, -1:Less than other </returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eFilterConditionCompare">
            <summary>
            Enumeration of filter pair comparison methods.
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.Equals">
            <summary>Return true if field equals the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.BeginsWith">
            <summary>Return true if field begins with the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.Contains">
            <summary>Return true if field contains the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.EndsWith">
            <summary>Return true if field ends with the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.InList">
            <summary>Return true if field in the list represented in the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.ListHas">
            <summary>Return true if value in the list represented in the field</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.LessThan">
            <summary>Return true if field is less than the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.LessThanOrEqual">
            <summary>Return true if field is less than or equal to the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.GreaterThanOrEqual">
            <summary>Return true if field is greater than or equal to the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionCompare.GreaterThan">
            <summary>Return true if field is greater than the value</summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare">
            <summary>
            Enumeration of filter pair Relative comparison methods.
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare.Equals">
            <summary>Return true if field equals the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare.LessThan">
            <summary>Return true if field is less than the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare.LessThanOrEqual">
            <summary>Return true if field is less than or equal to the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare.GreaterThanOrEqual">
            <summary>Return true if field is greater than or equal to the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare.GreaterThan">
            <summary>Return true if field is greater than the value</summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare">
            <summary>
            Enumeration of filter pair string comparison methods.
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare.Equals">
            <summary>Return true if field equals the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare.BeginsWith">
            <summary>Return true if field begins with the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare.Contains">
            <summary>Return true if field contains the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare.EndsWith">
            <summary>Return true if field ends with the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare.InList">
            <summary>Return true if field in the list represented in the value</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare.ListHas">
            <summary>Return true if value in the list represented in the field</summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eFilterDataType">
            <summary>
            Enumeration of the data type of the filtered data.
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterDataType.String">
            <summary>Using string methods for filtering</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterDataType.DateBegan">
            <summary>Using began date methods for filtering</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterDataType.DateEnded">
            <summary>Using ended date methods for filtering</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterDataType.Decimal">
            <summary>Using decimal methods for filtering</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterDataType.Integer">
            <summary>Using integer methods for filtering</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eFilterDataType.Long">
            <summary>Using long methods for filtering</summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cFilterCondition">
            <summary>
            Contains filter condition information including the field to compare, the value to compare,
            and the type of comparison to perform.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor">
            <summary>
            Creates a filter condtion class with default settings
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String)">
            <summary>
            Creates a string equal filter condition class
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a string equal filter condition class with negation flag 
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates a string equal filter condition class using a substring of the field
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a string equal filter condition class with a negation flag and using a substring of the field
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare)">
            <summary>
            Creates a string filter condition class allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare,System.Boolean)">
            <summary>
            Creates a string filter condition class with a negation flag and allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare,System.Int32,System.Int32)">
            <summary>
            Creates a string filter condition class using a substring of the field and allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a string filter condition class with a negation flag, using a substring of the field and allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare,System.DateTime,ECMPS.Definitions.Enumerations.eNullDateDefault)">
            <summary>
            Creates a filter condition class for a date/time and specifying a comparison method.
            </summary>
            <param name="field">The database column involved in the filter.</param>
            <param name="compare">The comparison to perform.</param>
            <param name="value">The value by which to filter.</param>
            <param name="nullDateDefault">Indicates whether to default null database values to the min or max datetime.  Defaults to min.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare,System.Int32)">
            <summary>
            Creates a filter condition class for a date/time and specifying a comparison method.
            </summary>
            <param name="field">The database column involved in the filter.</param>
            <param name="compare">The comparison to perform.</param>
            <param name="value">The value by which to filter.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.Int32)">
            <summary>
            Creates a filter condition class for a date/time and specifying a comparison method.
            </summary>
            <param name="field">The database column involved in the filter.</param>
            <param name="value">The value by which to filter.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType)">
            <summary>
            Creates a equality filter condition class allowing specification of the data type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType,ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare)">
            <summary>
            Creates a filter condition class allowing specification of the data type and comparison method
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType,ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare,System.Boolean)">
            <summary>
            Creates a filter condition class allowing specification of the data type, comparison method and negation
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.#ctor(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType,System.Boolean)">
            <summary>
            Creates a equality filter condition class allowing specification of the data type and negation
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cFilterCondition.Field">
            <summary>The field to compare</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cFilterCondition.DataType">
            <summary>The data type of the field to compare</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cFilterCondition.Value">
            <summary>The value to compare against the field</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cFilterCondition.Compare">
            <summary>The comparison method to use</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cFilterCondition.Negate">
            <summary>Whether the comparison should return the negation of the condition result</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cFilterCondition.SubstrPos">
            <summary>The begin position of the substring in the field to use in the discription</summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.cFilterCondition.SubstrLen">
            <summary>The length of the substring in the field to use in the discription</summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String)">
            <summary>
            Sets the condtion as a string equal filter condition class
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String,System.Boolean)">
            <summary>
            Sets the condtion as a string equal filter condition class with negation flag 
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Sets the condtion as a string equal filter condition class using a substring of the field
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sets the condtion as a string equal filter condition class with a negation flag and using a substring of the field
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare)">
            <summary>
            Sets the condtion as a string filter condition class allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare,System.Boolean)">
            <summary>
            Sets the condtion as a string filter condition class with a negation flag and allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare,System.Int32,System.Int32)">
            <summary>
            Sets the condtion as a string filter condition class using a substring of the field and allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.String,ECMPS.Checks.TypeUtilities.eFilterConditionStringCompare,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Sets the condtion as a string filter condition class with a negation flag, using a substring of the field and allowing specification of the comparison type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType)">
            <summary>
            Sets the condtion as a equality filter condition class allowing specification of the data type
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType,ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare)">
            <summary>
            Sets the condtion as a filter condition class allowing specification of the data type and comparison method
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType,ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare,System.Boolean)">
            <summary>
            Sets the condtion as a filter condition class allowing specification of the data type, comparison method and negation
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.Set(System.String,System.Object,ECMPS.Checks.TypeUtilities.eFilterDataType,System.Boolean)">
            <summary>
            Sets the condtion as a equality filter condition class allowing specification of the data type and negation
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cFilterCondition.ToString">
            <summary>
            Displays the condition settings
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cRowFilter">
            <summary>
            Contains functions and types that support the filtering of data views.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountRows(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[],System.Boolean)">
            <summary>
            Returns a count of the rows in the view where the boolean value of the row filter
            evaluation does not equal the ANotFilter flag.
            </summary>
            <param name="ASourceView">The data view to check</param>
            <param name="ARowFilter">The row filter to apply</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <returns>The number of rows matching the row filter and not filter.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountRows(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows in the view where the boolean value of the row filter
            evaluation is true.
            </summary>
            <param name="ASourceView">The data view to check</param>
            <param name="ARowFilter">The row filter to apply</param>
            <returns>The number of rows matching the row filter and not filter.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a count of the rows whose date and hour range fields overlap the passed
            date and hour range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <returns>The count of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Returns a count of the rows whose date and hour range fields overlap the passed
            date and hour range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <returns>The count of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is true.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is true.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <returns>The count of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <returns>The count of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <returns>The count of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime)">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <returns>The count of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.CountActiveRows(System.Data.DataView,System.DateTime,System.DateTime,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a count of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindRow(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[],System.Data.DataRowView@)">
            <summary>
            Finds the first row that matches the filter specification and return true if the rwo is found.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <param name="AFilteredRow">Out parameter of the first row found through filtering</param>
            <returns>True if a row was found otherwise false.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindRow(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns the first row that matches the filter specification.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The first row that matches the filter specification, or null if no row matches</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindRow(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns the first row that matches the filter specification.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="rowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindFirstRow(System.Data.DataView,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns the first row after applying the row filter and sort order.
            </summary>
            <param name="sourceView">The dataview on which to apply the filter and sort.</param>
            <param name="sortOrder">The sort to apply.</param>
            <param name="rowFilter">The filter to apply.</param>
            <returns>The first row after applying the filter and sort.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindLastRow(System.Data.DataView,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns the last row after applying the row filter and sort order.
            </summary>
            <param name="sourceView">The dataview on which to apply the filter and sort.</param>
            <param name="sortOrder">The sort to apply.</param>
            <param name="rowFilter">The filter to apply.</param>
            <returns>The last row after applying the filter and sort.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindRows(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[],System.Boolean)">
            <summary>
            Returns the rows that match the filter specification.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <returns>Data view of the rows that match the filter specification</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindRows(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns the rows that match the filter specification.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>Data view of the rows that match the filter specification</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindRows(System.Data.DataView,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindRows(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32)">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is true.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.DateTime,System.Int32,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is true.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="AEndedHour">The ended hour of the date and hour range to test rows against</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String)">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime)">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,System.String,System.String,System.Boolean,System.Boolean,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ABeganDateInclusive">Indicates whether began date is included in the range comparison</param>
            <param name="AEndedDateInclusive">Indicates whether ended date is included in the range comparison</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.DateTime,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDate">The ended date of the date and hour range to test rows against</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32)">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilterList">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ARowFilterList">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilterList">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The count of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is true.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="ABeganHourField">The began hour field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is not equal
            to the not filter flag.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Int32,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date and hour range fields overlap the passed
            date and hour range values and for which the row filter evaluation is true.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="AOpHour">The operating hour to test rows against</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.String,System.String)">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime)">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <returns>The data view of active rows</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.String,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="ARowFilter">The row filter to apply against the rows being tested.</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            including the end points depending on the began and ended date inclusive flags, 
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="ABeganDateField">The began date field name of the rows</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ANotFilter">Indicates whether to negate the result of evaluating the row filter.</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindActiveRows(System.Data.DataView,System.DateTime,ECMPS.Checks.TypeUtilities.cFilterCondition[][])">
            <summary>
            Returns a data view of the rows whose date range fields overlap the passed date range values
            and matching the filter conditions.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="AOpDate">The operating date to test rows against</param>
            <param name="ARowFilterList">A list of row filters that are or'd together to produce na evaluation</param>
            <returns>The data view of active rows that match the filter specifications</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            
            Note unlike some of its siblings, the most recent cannot be on or after referenceDatetime
            </summary>
            <param name="sourceView"></param>
            <param name="referenceDatetime"></param>
            <param name="dataDateTimeField"></param>
            <param name="notFilter"></param>
            <param name="rowFilter"></param>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.Int32,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.Int32,System.String,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="AEndedHourField">The ended hour field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.Int32,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.Int32,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ABeganHour">The began hour of the date and hour range to test rows against</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[],ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare)">
            <summary>
            Finds the row with an ended date closest but not after the specified began date 
            and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <param name="ACompare">The compare operator for filtering the recordset.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.String,ECMPS.Checks.TypeUtilities.cFilterCondition[],ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare)">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="AEndedDateField">The ended date field name of the rows</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <param name="ACompare">The compare operator for filtering the recordset.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[],ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare)">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ANotFilter">Whether to negate the value returned by the filter</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <param name="ACompare">The compare operator for filtering the recordset.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindMostRecentRow(System.Data.DataView,System.DateTime,ECMPS.Checks.TypeUtilities.cFilterCondition[],ECMPS.Checks.TypeUtilities.eFilterConditionRelativeCompare)">
            <summary>
            Finds the row with an ended date and hour closest but not after to the specified 
            began date and hour and matching the filter specifications.
            </summary>
            <param name="ASourceView">The data view object in which to count rows</param>
            <param name="ABeganDate">The began date of the date and hour range to test rows against</param>
            <param name="ARowFilter">The row filter to apply against each row.</param>
            <param name="ACompare">The compare operator for filtering the recordset.</param>
            <returns>The most recent row based on its end date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,System.DateTime,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row that contains the current date/hour and with the earliest began date/hour.
            If the began date/hour are the same for mote than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="currentDate">The began date of the date and hour range to test rows against</param>
            <param name="currentHour">The began hour of the date and hour range to test rows against</param>
            <param name="beganDateColumnName">The began date field name of the rows</param>
            <param name="beganHourColumnName">The began hour field name of the rows</param>
            <param name="endedDateColumnName">The ended date field name of the rows</param>
            <param name="endedHourColumnName">The ended hour field name of the rows</param>
            <param name="notFilter">Whether to negate the value returned by the filter</param>
            <param name="rowFilter">The row filter to apply against each row.</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,System.DateTime,System.Int32,System.Boolean,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row that contains the current date/hour and with the earliest began date/hour.
            If the began date/hour are the same for mote than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="currentDate">The began date of the date and hour range to test rows against</param>
            <param name="currentHour">The began hour of the date and hour range to test rows against</param>
            <param name="notFilter">Whether to negate the value returned by the filter</param>
            <param name="rowFilter">The row filter to apply against each row.</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,System.DateTime,System.Int32)">
            <summary>
            Finds the row that contains the current date/hour and with the earliest began date/hour.
            If the began date/hour are the same for mote than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="currentDate">The began date of the date and hour range to test rows against</param>
            <param name="currentHour">The began hour of the date and hour range to test rows against</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[],System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Finds the row that contains the current date/hour and with the earliest began date/hour.
            If the began date/hour are the same for mote than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="rowFilter">The row filter to apply against each row.</param>
            <param name="notFilter">Whether to negate the value returned by the filter</param>
            <param name="beganDateColumnName">The began date field name of the rows</param>
            <param name="beganHourColumnName">The began hour field name of the rows</param>
            <param name="endedDateColumnName">The ended date field name of the rows</param>
            <param name="endedHourColumnName">The ended hour field name of the rows</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[],System.Boolean)">
            <summary>
            Finds the row that contains the current date/hour and with the earliest began date/hour.
            If the began date/hour are the same for mote than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="rowFilter">The row filter to apply against each row.</param>
            <param name="notFilter">Whether to negate the value returned by the filter</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[])">
            <summary>
            Finds the row that contains the current date/hour and with the earliest began date/hour.
            If the began date/hour are the same for mote than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="rowFilter">The row filter to apply against each row.</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView)">
            <summary>
            Finds the row that contains the current date/hour and with the earliest began date/hour.
            If the began date/hour are the same for mote than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[],System.Boolean,System.String,System.String)">
            <summary>
            Finds the row using combined Datehour column (dateTime only, no hour columns)
            If the began date/hour are the same for more than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="rowFilter">The row filter to apply against each row.</param>
            <param name="notFilter">Whether to negate the value returned by the filter</param>
            <param name="beganDateColumnName">The began date field name of the rows</param>
            <param name="endedDateColumnName">The ended date field name of the rows</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRowByDate(System.Data.DataView,ECMPS.Checks.TypeUtilities.cFilterCondition[][],System.Boolean,System.String,System.String)">
            <summary>
            Finds the row using combined Datehour column (dateTime only, no hour columns)
            If the began date/hour are the same for more than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="rowFilterList">The or row filters to apply against each row.</param>
            <param name="notFilter">Whether to negate the value returned by the filter</param>
            <param name="beganDateColumnName">The began date field name of the rows</param>
            <param name="endedDateColumnName">The ended date field name of the rows</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.FindEarliestRow(System.Data.DataView,System.String,System.String)">
            <summary>
            Finds the row using combined Datehour column (dateTime only, no hour columns)
            If the began date/hour are the same for more than one row, then uses the row with the
            latest end date/hour, picking first record if more than one record has the latest end 
            date/hour.
            </summary>
            <param name="sourceView">The data view object in which to count rows</param>
            <param name="beganDateColumnName">The began date field name of the rows</param>
            <param name="endedDateColumnName">The ended date field name of the rows</param>
            <returns>The earliest row based on its begin date and hour</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.GetColumnDate(System.Data.DataRowView,System.String,ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Attempts to return the date value from the data row view and column passed.
            Returns DBNULL if it cannot return the value.
            </summary>
            <param name="rowView">The row containing the value.</param>
            <param name="columnName">The column containing the value.</param>
            <param name="dateType">The Date Type of the column.</param>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cRowFilter.GetColumnHour(System.Data.DataRowView,System.String,ECMPS.Checks.TypeUtilities.DateTypes)">
            <summary>
            Attempts to return the hour value from the data row view and column passed.
            Returns DBNULL if it cannot return the value.
            </summary>
            <param name="rowView">The row containing the value.</param>
            <param name="columnName">The column containing the value.</param>
            <param name="dateType">The Date Type of the column.</param>
            <returns></returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cStringValidator">
            <summary>
            String validation functions
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.IsNaturalNumber(System.String)">
            <summary>
            Function to test for Positive Integers
            </summary>
            <param name="strNumber">String representation of a number to check</param>
            <returns>true if a positive integer, false otherwise</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.IsWholeNumber(System.String)">
            <summary>
            Function to test for Positive Integers with zero inclusive
            </summary>
            <param name="strNumber"></param>
            <returns>true if whole integer, false otherwise</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.IsInteger(System.String)">
            <summary>
            Function to Test for Integers both Positive and Negative
            </summary>
            <param name="strNumber"></param>
            <returns>true if integer, false otherwise</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.IsPositiveNumber(System.String)">
            <summary>
            Function to Test for Positive Number both Integer and Real 
            </summary>
            <param name="strNumber"></param>
            <returns>true if positive number, false otherwise</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.IsNumber(System.String)">
            <summary>
            Function to test whether the string is valid number or not
            </summary>
            <param name="strNumber"></param>
            <returns>true if valid number, false otherwise</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.IsAlpha(System.String)">
            <summary>
            Function To test for Alphabets. 
            </summary>
            <param name="strToCheck"></param>
            <returns>true if Alphabets, false otherwise</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cStringValidator.IsAlphaNumeric(System.String)">
            <summary>
            Function to Check for AlphaNumeric.
            </summary>
            <param name="strToCheck"></param>
            <returns>true if AlphaNumeric, false otherwise</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDateTimeList">
            <summary>
            Implements additional methods for a List of cOperatingHour
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeList.#ctor">
            <summary>
            Creates a cDateTimeList.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeList.#ctor(System.DateTime[])">
            <summary>
            Creates a cDateTimeList from a DateTime array.
            </summary>
            <param name="dateTimeArray">The DateTime array.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeList.#ctor(System.Nullable{System.DateTime}[])">
            <summary>
            Creates a cDateTimeList from a DateTime array.
            </summary>
            <param name="dateTimeArray">The DateTime array.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeList.Add(System.DateTime[])">
            <summary>
            Adds the items in the DateTime array.
            </summary>
            <param name="dateTimeArray">The array of datetimes.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeList.Add(System.Nullable{System.DateTime}[])">
            <summary>
            Adds the items in the DateTime array.
            </summary>
            <param name="dateTimeArray">The array of datetimes.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeList.Add(System.DateTime,System.Int32)">
            <summary>
            Adds the date with time as the passed hour
            </summary>
            <param name="date">The date to use.</param>
            <param name="hour">The hour to use as the time.</param>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDateTimeRange">
            <summary>
            Represents a datetime range.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeRange.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            The base constructor.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cDateTimeRange.Began">
            <summary>
            The beginning date of the range.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cDateTimeRange.Ended">
            <summary>
            The ending date of the range.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cDateTimeRange.Tag">
            <summary>
            An object for any users purpose.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeRange.DaysInRange">
            <summary>
            Returns the number of days in the range including the end dates.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeRange.HoursInRange">
            <summary>
            Returns the number of hours in the range including the end hours.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeRange.Equals(ECMPS.Checks.TypeUtilities.cOperatingDateRange)">
            <summary>
            Determines whether this DateTime has the same value as the passed DateTime
            </summary>
            <param name="other">The DateTime to which this cOperatingHour is compared.</param>
            <returns>0: Equal, 1: Greater than other, -1:Less than other </returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDateTimeRanges">
            <summary>
            Provides a list of cDateRange objects.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cDateTimeRanges.Tag">
            <summary>
            Tag element used to store any information needed by the user.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cDateTimeRanges.AddUnique(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Adds a cDateTimeRange object for a non existing Began/Ended date combination.
            </summary>
            <param name="began">Began date of range.</param>
            <param name="ended">Ended date of range</param>
            <returns>True if range is unique and was inserted.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cDateTimeRangesList">
            <summary>
            Provides a list of cDateTimeRanges objects.
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eHour">
            <summary>
            An enumeration of hours
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h00">
            <summary>
            12am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h01">
            <summary>
            1am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h02">
            <summary>
            2am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h03">
            <summary>
            3am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h04">
            <summary>
            4am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h05">
            <summary>
            5am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h06">
            <summary>
            6am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h07">
            <summary>
            7am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h08">
            <summary>
            8am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h09">
            <summary>
            9am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h10">
            <summary>
            10am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h11">
            <summary>
            11am
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h12">
            <summary>
            12pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h13">
            <summary>
            1pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h14">
            <summary>
            2pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h15">
            <summary>
            3pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h16">
            <summary>
            4pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h17">
            <summary>
            5pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h18">
            <summary>
            6pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h19">
            <summary>
            7pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h20">
            <summary>
            8pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h21">
            <summary>
            9pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h22">
            <summary>
            10pm
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eHour.h23">
            <summary>
            11pm
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.eQuarter">
            <summary>
            An enumeration of quarters
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eQuarter.q1">
            <summary>
            Q1
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eQuarter.q2">
            <summary>
            Q2
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eQuarter.q3">
            <summary>
            Q3
            </summary>
        </member>
        <member name="F:ECMPS.Checks.TypeUtilities.eQuarter.q4">
            <summary>
            Q4
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingHour">
            <summary>
            Holds the date and hour parts of an operating hour.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHour.#ctor(System.DateTime,ECMPS.Checks.TypeUtilities.eHour)">
            <summary>
            Constructor for an Operating hour.
            </summary>
            <param name="date">The initial date of the operating hour.</param>
            <param name="hour">The initial hour of the operating hour.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHour.#ctor(ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Constructor for an Operating hour.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingHour.Date">
            <summary>
            The date part of the operating hour
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingHour.Hour">
            <summary>
            The hour part of the operating hour
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHour.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>The string representation of the object.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHour.AddHours(System.Int32)">
            <summary>
            Returns an operating hour with the hours shifted by the designated amount.
            </summary>
            <param name="shift">The number of hours to add.</param>
            <returns>Returns a copy of the updated operating hour.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHour.AddDays(System.Int32)">
            <summary>
            Returns an operating hour with the days shifted by the designated amount.
            </summary>
            <param name="shift">The number of days to add.</param>
            <returns>Returns a copy of the updated operating hour.</returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHour.CompareTo(ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Compare this cOperatingHour to the passed cOperater
            </summary>
            <param name="other">The cOperatingHour to which this cOperatingHour is compared.</param>
            <returns>0: Equal, 1: Greater than other, -1:Less than other </returns>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHour.Equals(ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Determines whether this cOperatingHour has the same value as the passed cOperater
            </summary>
            <param name="other">The cOperatingHour to which this cOperatingHour is compared.</param>
            <returns>0: Equal, 1: Greater than other, -1:Less than other </returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingDateRange">
            <summary>
            Represents a date range.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingDateRange.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            The base constructor.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingDateRange.Began">
            <summary>
            The beginning date of the range.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingDateRange.Ended">
            <summary>
            The ending date of the range.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingDateRange.Tag">
            <summary>
            An object for any users purpose.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingDateRange.Equals(ECMPS.Checks.TypeUtilities.cOperatingDateRange)">
            <summary>
            Determines whether this DateTime has the same value as the passed DateTime
            </summary>
            <param name="other">The DateTime to which this cOperatingHour is compared.</param>
            <returns>0: Equal, 1: Greater than other, -1:Less than other </returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingDateRanges">
            <summary>
            Provides a list of cDateRange objects.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingDateRanges.AddUnique(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Adds a COperatingDateRange object for a non existing Began/Ended date combination.
            </summary>
            <param name="began">Began date of range.</param>
            <param name="ended">Ended date of range</param>
            <returns>True if range is unique and was inserted.</returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingDateRangesList">
            <summary>
            Provides a list of cDateRange objects.
            </summary>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingHourList">
            <summary>
            Implements additional methods for a List of cOperatingHour
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHourList.Add(System.DateTime,ECMPS.Checks.TypeUtilities.eHour)">
            <summary>
            Creates a cOperatingHour and adds it to the list.
            </summary>
            <param name="date">The date for the cOperatingHour.</param>
            <param name="hour">The hour for the cOperatingHour.</param>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingHourRange">
            <summary>
            Represents a date range.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHourRange.#ctor(ECMPS.Checks.TypeUtilities.cOperatingHour,ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            The base constructor
            </summary>
            <param name="began">The operating hour the range began.</param>
            <param name="ended">The operating hour the range ended.</param>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHourRange.#ctor(ECMPS.Checks.TypeUtilities.cOperatingHourRange)">
            <summary>
            The base constructor
            </summary>
            <param name="operatingHourRange">The operating hour range.</param>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingHourRange.Began">
            <summary>
            The beginning date/hour of the range.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingHourRange.Ended">
            <summary>
            The ending date/hour of the range.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingHourRange.Tag">
            <summary>
            An object for any users purpose.
            </summary>
        </member>
        <member name="P:ECMPS.Checks.TypeUtilities.cOperatingHourRange.Length">
            <summary>
            The length of the range.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHourRange.Equals(ECMPS.Checks.TypeUtilities.cOperatingHourRange)">
            <summary>
            Determines whether this cOperatingHour has the same value as the passed cOperater
            </summary>
            <param name="other">The cOperatingHour to which this cOperatingHour is compared.</param>
            <returns>0: Equal, 1: Greater than other, -1:Less than other </returns>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingHourRanges">
            <summary>
            Provides a list of cDateRange objects.
            </summary>
        </member>
        <member name="M:ECMPS.Checks.TypeUtilities.cOperatingHourRanges.Add(ECMPS.Checks.TypeUtilities.cOperatingHour,ECMPS.Checks.TypeUtilities.cOperatingHour)">
            <summary>
            Adds an operating hour reange for the passed range of operating hours.
            </summary>
            <param name="began">The beginning operating hour of the range.</param>
            <param name="ended">The ending operating hour of the range.</param>
        </member>
        <member name="T:ECMPS.Checks.TypeUtilities.cOperatingHourRangesList">
            <summary>
            Provides a list of cHourange objects.
            </summary>
        </member>
    </members>
</doc>
